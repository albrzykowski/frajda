version: '3.8'

services:
  couchdb:
    image: docker.io/bitnami/couchdb:3
    container_name: couchdb
    environment:
      COUCHDB_USER: ${COUCHDB_USER}
      COUCHDB_PASSWORD: ${COUCHDB_PASSWORD}
    ports:
      - '5984:5984'
      - '4369:4369'
      - '9100:9100'
    volumes:
      - couchdb_data:/bitnami/couchdb
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${COUCHDB_USER}:${COUCHDB_PASSWORD}@localhost:5984"]
      interval: 10s
      timeout: 5s
      retries: 5
      
  db_initializer:
    image: curlimages/curl:7.83.1
    container_name: db_initializer
    depends_on:
      couchdb:
        condition: service_healthy
    command: >
      /bin/sh -c "
      echo 'Waiting for CouchDB...' &&
      curl -X PUT http://${COUCHDB_USER}:${COUCHDB_PASSWORD}@couchdb:5984/players &&
      echo 'Database initialized.'
      "

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 5s
      timeout: 10s
      retries: 5
  
  api_gateway:
    build:
      context: .
      dockerfile: ./api_gateway/Dockerfile
    container_name: api_gateway
    ports:
      - "8000:8000"
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@rabbitmq:5672/%2F
    
  gamification_service:
    build:
      context: .
      dockerfile: ./gamification_service/Dockerfile
    container_name: gamification_service
    ports:
      - "8001:8001"
    environment:
      COUCHDB_HOST: "couchdb"
      COUCHDB_PORT: "5984"
      COUCHDB_USER: ${COUCHDB_USER}
      COUCHDB_PASSWORD: ${COUCHDB_PASSWORD}
      RABBITMQ_HOST: "rabbitmq"
      RABBITMQ_PORT: "5672"
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
    depends_on:
      rabbitmq:
        condition: service_healthy
      couchdb:
        condition: service_healthy

volumes:
  couchdb_data:
  rabbitmq-data: